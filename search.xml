<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>始-程序运行</title>
      <link href="2021/10/03/%5BOS%5D%E5%A7%8B/"/>
      <url>2021/10/03/%5BOS%5D%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/yan.jpg" alt="yan"></p><blockquote><p> [1] Ken Thompson （one month）创造Unix</p><p> 又与[2]Dennis Ritchie 共同创造C语言</p></blockquote><blockquote><p>计算机<strong>硬件</strong>是无法直接运行这个 C 语言<strong>文本程序</strong>代码的</p><ul><li><p>需要 C 语言【编译器】，把这个代码编译成<strong>具体硬件平台</strong>的[二进制代码]</p></li><li><p>再由具体【操作系统】建立进程，把这个二进制文件装进其进程的<strong>内存空间</strong>中</p></li></ul><h5 id="程序编译"><a href="#程序编译" class="headerlink" title="程序编译"></a>程序编译</h5><blockquote><p>GCC 相关的工具链</p><p>$ gcc HelloWorld.c -o HelloWorld 或者 gcc ./HelloWorld.c -o ./HelloWorld</p><p>GCC 只是完成编译工作的<strong>动程序</strong>，它会根据编译流程分别调用预处理程序、编译程序、汇编程序、链接程序来完成具体工作</p><p><img src="/img/OS-1/1-1.jpg" alt="1-1"></p><p>gcc HelloWorld.c -E -o HelloWorld.i 预处理：加入<strong>头文件</strong>，替换<strong>宏</strong>。</p><p>gcc HelloWorld.c -S -c HelloWorld.s 编译：包含预处理，将 C 程序转换成<strong>汇编程序</strong>。</p><p>gcc HelloWorld.c -c HelloWorld.o 汇编：包含预处理和编译，将汇编程序转换成<strong>可链接的二进制程序</strong>。</p><hr><p>gcc HelloWorld.c -o HelloWorld 链接：包含以上所有操作，将<strong>可链接的二进制程序和其它别的库链接</strong>在一起，形成可执行的程序文件。</p></blockquote></blockquote><blockquote><p> [3] 阿兰图灵的图灵机</p><p> 图灵机是一个抽象的模型,它是这样的:有一条无限长的纸带,纸带上有无限个小格 子,小格子中写有相关的信息,纸带上有一个读头,<strong>读头能根据纸带小格子里的信息做 相关的操作并能来回移动</strong></p><p> [4] 冯诺伊曼的体系结构</p><p> 电子计算机使用<strong>二进制数制系统</strong>和<strong>储存程序</strong>,并按照程序顺序执行</p><ul><li>把程序和数据装入到计算机中;</li><li>必须具有长期记住程序、数据的中间结果及最终运算结果;</li><li>完成各种算术、逻辑运算和数据传送等数据加工处理;</li><li>根据需要控制程序走向,并能根据指令控制机器的各部件协调操作;</li><li> 能够按照要求将处理的数据结果显示给用户。</li></ul><p> 为了完成上述的功能,计算机必须具备五大基本组成部件</p><ul><li>装载数据和程序的输入设备</li><li>记住程序和数据的存储器</li><li>完成数据加工处理的运算器</li><li>控制程序执行的控制器</li><li>显示处理结果的输出设备</li></ul><p> Finally</p><blockquote><p><img src="/img/OS-1/1-2.jpg" alt="1-2"></p><p>我们发现读头不再来回移动了，而是靠<strong>地址总线</strong>寻找对应的“纸带格子”。读取写入数据由<strong>数据总线</strong>完成，而动作的控制就是<strong>控制总线</strong>的职责了</p></blockquote></blockquote><blockquote><h5 id="装载执行"><a href="#装载执行" class="headerlink" title="装载执行"></a>装载执行</h5><blockquote><ul><li>反汇编</li></ul><p>gcc -c -S HelloWorld</p><p><img src="/img/OS-1/1-3.jpg" alt="1-3"></p><p>第一列为地址；第二列为十六进制，表示<strong>真正装入机器中的代码数据</strong>；第三列是对应的<strong>汇编代码</strong>；第四列是相关<strong>代码的注释</strong>。这是 x86_64 体系的代码，由此可以看出 x86 CPU 是变长指令集</p><p><img src="/img/OS-1/1-4.jpg" alt="1-4"></p><p>现代电子计算机正是通过内存中的信息（<strong>指令和数据</strong>）做出相应的<strong>操作</strong>，并通过<strong>内存地址</strong>的变化，达到程序<strong>读取数据，控制程序流程</strong>（顺序、跳转对应该图灵机的读头来回移动）的功能</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑-空中楼阁</title>
      <link href="2021/09/27/%E7%AD%91/"/>
      <url>2021/09/27/%E7%AD%91/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/yan.jpg" alt="yan"></p><p><em>物理资源的逻辑抽象</em></p><p><em>从底层向应用层</em></p><blockquote><p>计算机是可以自动执行任意的逻辑或算数指令序列的机器</p><p>计算机 = 一台自动执行的机器 + <strong>一张说明书（程序）</strong>+ 一张白纸（存</p><p>储）</p><h4 id="一张说明书"><a href="#一张说明书" class="headerlink" title="一张说明书"></a>一张说明书</h4><ul><li>程序(说明书)</li></ul><blockquote><p>程序 = 算法 + 数据结构</p><p>程序是用来指导计算机应该做些什么事情的一张<strong>说明书</strong>，只有在程序的</p><p>帮助下，计算机才知道应该如何执行</p><p><strong>程序的最终目的是用来处理数据的</strong>。</p><p>一个程序可能没有输入，但是一定会有输出。不然就是浪费电</p></blockquote><ul><li>算法</li></ul><blockquote><p>算法是程序的逻辑</p></blockquote><ul><li>数据结构</li></ul><blockquote><p>数据结构是计算机中存储、组织数据的方式，让计算机高效的处理数据</p></blockquote><ul><li>语言</li></ul><blockquote><p>语言是程序的表示方法</p></blockquote><h4 id="一台机器"><a href="#一台机器" class="headerlink" title="一台机器"></a>一台机器</h4><ul><li>CPU</li></ul><blockquote><ol><li><p>知道程序（说明书）存储的位置</p></li><li><p>知道自己运行到说明书的什么地方</p></li><li><p>可以读取直接自己下一条应该根据（程序）说明书干什么事情</p></li><li><p>能干的事情：算数逻辑运算，或者跳转（说明书分支）</p></li></ol></blockquote><h4 id="一张白纸"><a href="#一张白纸" class="headerlink" title="一张白纸"></a>一张白纸</h4><ul><li>CPU 的寄存器 (Register)</li></ul><blockquote><p>CPU 本身有数据的缓存地方，叫做寄存器</p><p>数据只有在寄存器里面，才可以被 CPU 进行运算（易失）</p><p>读取寄存器的延迟时间：1</p><p>寄存器的大小：几十个数字</p></blockquote><ul><li>高速缓存 (Cache)</li></ul><blockquote><p>高速缓存是 CPU 的一个部分（不同于寄存器），由硬件进行管理，可以</p><p>忽略看不见（易失)</p><p>读取高速缓存的延迟时间：10-50</p><p>高速缓存的大小：10M 左右</p></blockquote><ul><li><p>主存 (内存，Main memory)</p><blockquote><p>主存是最大的 CPU 可以<strong>直接调用</strong>的最大的存储设备</p><p>所有的程序和数据运行的时候都会缓存在主存里面(易失)</p><p>读取主存的延迟时间：100+</p><p>主存的大小：1G-100G</p></blockquote></li><li><p>硬盘 (Hard disk)</p><blockquote><p>最大的存储设备(非易失)</p><p>读取硬盘的延迟时间：1000+</p><p>硬盘的大小：100G-1T</p></blockquote></li></ul></blockquote><p><em>一穷二白的年纪 至少还有微薄的工资｜充足的时间｜免费的网络资源｜可以记录生活的设备</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> yan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研途</title>
      <link href="2021/09/16/%E7%A0%94%E9%80%94/"/>
      <url>2021/09/16/%E7%A0%94%E9%80%94/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/yan.jpg" alt="yan"></p><p>还有<strong>197</strong>天<br><br>以一个计算机专业的身份毕业<br></p><br><br><br>  *一穷二白的年纪 至少还有微薄的工资｜充足的时间｜免费的网络资源｜可以记录生活的设备*]]></content>
      
      
      
        <tags>
            
            <tag> yan </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
